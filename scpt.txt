function Invoke-ScriptDecrypt ($payload, $chave_base64, $iv_base64){
	function Download-Script($url) {
        $webClient = New-Object System.Net.WebClient
        $script = $webClient.DownloadString($url)
        return $script
    }
	function Load-EncryptedScript($encryptedScript, $keyParam, $ivParam) {
	    $scriptBytes = [Convert]::FromBase64String($encryptedScript)
	    $key = [Convert]::FromBase64String($keyParam)	
	    $iv = [Convert]::FromBase64String($ivParam)
	
	    $aes = New-Object System.Security.Cryptography.AesCryptoServiceProvider
	    $aes.Key = $key
	    $aes.IV = $iv
	
	    $decryptor = $aes.CreateDecryptor()
	    $decryptedBytes = $decryptor.TransformFinalBlock($scriptBytes, 0, $scriptBytes.Length)
	
	    return [System.Text.Encoding]::UTF8.GetString($decryptedBytes)
	}
	
	$encryptedScript = $payload
	$keyParam = $chave_base64
	$ivParam = $iv_base64

    if ($encryptedScript -match '^http') {
        # If the payload is a URL, download it.
        $encryptedScript = Download-Script -url $encryptedScript
    } else {
        # Otherwise, assume it's a local file path.
        if (-not (Test-Path -Path $encryptedScript)) {
            throw "The specified file path '$encryptedScript' does not exist."
        }
        
        # Read the contents of the file.
        $encryptedScript = Get-Content -Path $encryptedScript -Raw
    }

    if ($keyParam -match '^http') {
        # If the keyParam is a URL, download it.
        $keyParam = Download-Script -url $keyParam
    } else {
        # Otherwise, assume it's a local file path.
        if (-not (Test-Path -Path $keyParam)) {
            throw "The specified file path '$keyParam' does not exist."
        }
        
        # Read the contents of the file.
        $keyParam = Get-Content -Path $keyParam -Raw
    }

    if ($ivParam -match '^http') {
        # If the ivParam is a URL, download it.
        $ivParam = Download-Script -url $ivParam
    } else {
        # Otherwise, assume it's a local file path.
        if (-not (Test-Path -Path $ivParam)) {
            throw "The specified file path '$ivParam' does not exist."
        }
        
        # Read the contents of the file.
        $ivParam = Get-Content -Path $ivParam -Raw
    }

	$decryptedScript = Load-EncryptedScript -encryptedScript $encryptedScript -keyParam $keyParam -ivParam $ivParam
	
	
    	return $decryptedScript
}